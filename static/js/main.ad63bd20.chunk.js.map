{"version":3,"sources":["assets/images/hero.jpeg","containers/hero/index.js","contexts/StyleContext.js","containers/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","index","class","background_color","src","hero","alt","StyleContext","React","createContext","StyleProvider","Provider","Main","Consumer","props","changeTheme","setState","isDark","state","localStorage","setItem","getItem","darkPref","window","matchMedia","matches","this","JSON","parse","className","value","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,mC,yPCkB5BC,MAdf,WACE,OACE,yBAAKC,MAAM,sCAAsCC,iBAAiB,WAChE,6BACE,kDAKF,yBAAKC,IAAKC,IAAMC,IAAI,iECXpBC,EAAeC,IAAMC,gBAEdC,EAAgBH,EAAaI,SCiBrBC,GDhBQL,EAAaM,S,wDCiBxC,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,YAAc,WACZ,EAAKC,SAAS,CAACC,QAAS,EAAKC,MAAMD,SAAS,WAC1CE,aAAaC,QAAQ,SAAU,EAAKF,MAAMD,YAd5C,EAAKC,MAAQ,CACXD,QAAQ,GAHO,E,gEAQjB,GAAuC,OAAnCE,aAAaE,QAAQ,UAAoB,CAC3C,IAAMC,EAAWC,OAAOC,WAAW,gCACnCL,aAAaC,QAAQ,SAAUE,EAASG,SAE1CC,KAAKV,SAAS,CAACC,OAAQU,KAAKC,MAAMT,aAAaE,QAAQ,e,+BASvD,OACE,yBAAKQ,UAAWH,KAAKR,MAAMD,OAAS,YAAc,MAChD,kBAACP,EAAD,CACEoB,MAAO,CAACb,OAAQS,KAAKR,MAAMD,OAAQF,YAAaW,KAAKX,cAEvD,kBAAC,EAAD,Y,GA3B0BgB,cCTnBC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ad63bd20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hero.e183ca85.jpeg\";","import React from \"react\";\nimport \"./index.css\";\nimport hero from \"../../assets/images/hero.jpeg\"\n\nfunction index() {\n  return (\n    <div class=\"Hero__HeroContainer-b98oqm-0 kvYdOK\" background_color=\"#f2babd\">\n      <div>\n        <h1>We Are CREATIVITY</h1>\n        {/* <a href=\"start/\" class=\"Hero__CTAButton-b98oqm-1 gJuuYA\">\n          Let's start\n        </a> */}\n      </div>\n      <img src={hero} alt=\"Smaller is Creativity, And creates custom websites for you\" />\n    </div>\n  );\n}\n\nexport default index;\n","import React from \"react\";\n\nconst StyleContext = React.createContext();\n\nexport const StyleProvider = StyleContext.Provider;\nexport const StyleConsumer = StyleContext.Consumer;\n\nexport default StyleContext;\n","import React, {Component} from \"react\";\n// import Header from \"../components/header/Header\";\n// import Greeting from \"./greeting/Greeting\";\n// import Skills from \"./skills/Skills\";\n// import StackProgress from \"./skillProgress/skillProgress\";\n// import WorkExperience from \"./workExperience/WorkExperience\";\n// import Projects from \"./projects/Projects\";\n// import StartupProject from \"./StartupProjects/StartupProject\";\n// import Achievement from \"./achievement/Achievement\";\n// import Blogs from \"./blogs/Blogs\";\n// import Footer from \"../components/footer/Footer\";\n// import Talks from \"./talks/Talks\";\n// import Podcast from \"./podcast/Podcast\";\n// import Education from \"./education/Education\";\n// import Top from \"./topbutton/Top\";\nimport Hero from \"./hero\"\n// import Twitter from \"./twitter-embed/twitter\";\nimport {StyleProvider} from \"../contexts/StyleContext\";\nimport \"./Main.css\";\n// import Profile from \"./profile/Profile\";\n\nexport default class Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDark: true\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(\"isDark\") === null) {\n      const darkPref = window.matchMedia(\"(prefers-color-scheme: dark)\");\n      localStorage.setItem(\"isDark\", darkPref.matches);\n    }\n    this.setState({isDark: JSON.parse(localStorage.getItem(\"isDark\"))});\n  }\n  changeTheme = () => {\n    this.setState({isDark: !this.state.isDark}, () => {\n      localStorage.setItem(\"isDark\", this.state.isDark);\n    });\n  };\n\n  render() {\n    return (\n      <div className={this.state.isDark ? \"dark-mode\" : null}>\n        <StyleProvider\n          value={{isDark: this.state.isDark, changeTheme: this.changeTheme}}\n        >\n        <Hero />\n          {/* <Header />\n          <Greeting />\n          <Skills />\n          <StackProgress />\n          <Education />\n          <WorkExperience /> */}\n          {/* <Projects /> */}\n          {/* <StartupProject />\n          <Achievement />\n          <Blogs />\n          <Talks /> */}\n          {/* <Twitter /> */}\n          {/* <Podcast />\n          <Profile />\n          <Footer />\n          <Top /> */}\n        </StyleProvider>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./containers/Main\";\n\nfunction App() {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}